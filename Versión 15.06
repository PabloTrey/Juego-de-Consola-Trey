#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

// LIMPIA LA PANTALLA (ANDA EN WINDOWS Y MAC/LINUX)
void limpiarPantalla();
// PAUSA HASTA QUE SE PRESIONE ENTER
void pausarPantalla();
// DIBUJA LOS DADOS
void dibujarDados(int vDado[], int cantidad);
// MUESTRA LOS CREDITOS DEL GRUPO
void mostrarCreditos();
// PREGUNTA SI REALMENTE QUIERE SALIR DEL JUEGO
bool confirmarSalida();
// ROBA UNA CARTA Y ASIGNA PUNTOS DE TIEMPO
int robarCarta(int &pt);
// CUENTA CUANTAS VECES APARECE UN VALOR EN EL VECTOR DE DADOS
int contarValor(int vDado[], int tam, int valor);
// ANALIZA LA JUGADA Y APLICA BUGS/FIXES Y PUNTOS DE RONDA (HAY QUE REVISARLO BIEN)
void analizarJugada(int vDado[], int tam, int &pt, int &bugs, int &puntosRonda, bool &llegoCero, bool &hizo20, bool &penalizar5);
// MUESTRA PANTALLA EN JUEGO Y ESTADISTICAS DE LOS JUGADORES
void mostrarPanelRonda(string nombreJug[2], int puntosTotales[2], int objetivo[2], int pt[2], int bugs[2], int turno, int ronda, int puntosRonda, int lanzamientos);
// MOSTRAR RESULTADOS FINALES
void mostrarResultadoFinales(string nombreJug[], int puntosTotales[], int pt[], int bugs[], bool llegoCero[], bool hizo20[]);
// MUESTRA ESTADISTICAS (EN DESARROLLO)
void mostrarEstadisticas( string nombreJug [], int puntosTotales [], int cantidad);
//PARA LOS HITOS
int calcularPuntajeFinal(int puntosTotales, int bugs, int pt);
//FUNCION PRINCIPAL DEL JUEGO
void jugar(string rankingNombres [], int rankingPuntos[], int &totalJugadores);

int main()
{
    string rankingNombres[2];
    int rankingPuntos [2];
    int totalJugadores=0;

    srand(time(NULL));
// PONER LA SEMILLA ALEATORIA UNA SOLA VEZ
    int opcion;
    bool salir = false;

    while (!salir)
    {
        limpiarPantalla();
        cout << endl<<endl<<endl<<endl<<endl;
        cout << endl;
        cout << endl;
        cout << endl;
        cout << endl;
        cout << "                                           =======================" << endl;
        cout << "                                                     TREY           " << endl;
        cout << "                                           =======================" << endl;
        cout << "                                           1 - JUGAR" << endl;
        cout << "                                           2 - ESTADISTICAS" << endl;
        cout << "                                           3 - CREDITOS" << endl;
        cout << "                                           0 - SALIR" << endl;
        cout << "                                           Seleccione una opcion: ";


        cin >> opcion;

        if (cin.fail())
        {
            cin.clear();
            cin.ignore(1000, '\n');
            opcion = -1;
            cout << "La opcion no es valida."<<endl;
        }

        limpiarPantalla();

        switch (opcion)
        {
        case 1:
            jugar(rankingNombres,rankingPuntos,totalJugadores);                  // JUGAR UNA PARTIDA
            break;
        case 2:
            mostrarEstadisticas(rankingNombres,rankingPuntos,totalJugadores);     // MOSTRAR ESTADISTICAS
            pausarPantalla();
            break;
        case 3:
            mostrarCreditos();        // MOSTRAR CREDITOS
            break;
        case 0:
            salir = confirmarSalida();// Preguntar si quiere salir
            break;
        default:
            cout << "Opcion invalida. Intente nuevamente." << endl;
            pausarPantalla();
        }
    }
    return 0;
}

// === FUNCION PRINCIPAL DEL JUEGO ===
void jugar(string rankingNombres[], int rankingPuntos [], int &totalJugadores)
{
    // VARIABLES PRINCIPALES DEL JUEGO
    string nombreJug[2];
    int pt[2] = {0, 0};
    int bugs[2] = {0,0 };//para test de bugs modificar acá
    bool llegoABugCero[2] = {false, false};//para hitos
    bool hizo20SinBugs[2] = {false, false};//para hitos

    int objetivo[2] = {0, 0};
    int puntosTotales[2] = {0, 0};
    int rondaActual =1;
    bool finalizado[2] = {false, false};
    totalJugadores=0;

    // REGISTRO DE NOMBRES
    cout <<endl<<endl<<endl<<endl;
    cout << "                              Antes de comenzar deben registrar sus nombres:" << endl;
    cout << "                              Jugador 1: ";
    cin.ignore();               //limpia buffer para que funcione getline
    getline(cin,nombreJug[0]);  //para poder ingresar por ejemplo "Juan Pablo"
    cout << endl << "                              Jugador 2: ";
    getline(cin,nombreJug[1]);
    limpiarPantalla();

    // ROBAR CARTA Y DEFINIR OBJETIVO INICIAL
    for (int i = 0; i < 2; i++)
    {
        cout <<endl<<endl<<endl<<endl<<endl;
        cout << "                                     "  <<nombreJug[i] <<" eleg� una carta para empezar: " << endl;
        pausarPantalla();
        objetivo[i] = robarCarta(pt[i]);
        cout << "                                                  Recibe " << pt[i] << " PT" << endl;
    }

    pausarPantalla();
    limpiarPantalla();

    // TURNOS DE LOS JUGADORES
    int turno = 0;
    bool juegoTerminado = false;

    while (!juegoTerminado)
    {
        if (finalizado[turno])
        {
            turno = (turno + 1) % 2;
            continue;
        }

        int lanzamientoActual=0;
        int puntosRonda = 0;
        bool seguirJugando = true;

        // int lanzamientos = 0;
        while (seguirJugando)
        {
            lanzamientoActual++;
            limpiarPantalla();
            mostrarPanelRonda(nombreJug, puntosTotales, objetivo, pt, bugs, turno, rondaActual, puntosRonda, lanzamientoActual);

            // SI NO TIENE PT, TERMINA SU JUEGO
            if (pt[turno] < 1)
            {
                cout << nombreJug[turno] << " no tiene puntos de tiempo suficientes. Fin del juego para este jugador." << endl;
                finalizado[turno] = true;
                juegoTerminado = true;

                mostrarResultadoFinales(nombreJug, puntosTotales, pt, bugs, llegoABugCero, hizo20SinBugs);
                break;
            }

            // SELECCION DE DADOS
            int nDado;

            if (pt[turno] == 1  )
            {
                cout << "Solo tienes 1 PT. Solo puedes tirar 2 dados." << endl;
                nDado = 2;
            }
            //si tiene 3 bugs o
            if (bugs[turno] >= 3)
            {
                cout << "tienes 3 bugs o mas. Solo puedes tirar 2 dados." << endl;
                nDado = 2;
            }
            else
            {
                cout << "Con cuantos dados queres lanzar? (2 = 1PT / 3 = 2PT): ";
                cin >> nDado;

                while ((nDado != 2 && nDado != 3) || (nDado == 2 && pt[turno] < 1) || (nDado == 3 && pt[turno] < 2))
                {
                    cout << "Opcion invalida o sin PT suficiente. Elegí otra cantidad: ";

                    if (!(cin >> nDado))
                    {
                        cin.clear();
                        cin.ignore(1000, '\n');
                        nDado = 0;
                    }
                }
            }

            pt[turno] -= (nDado == 2 ? 1 : 2);

            // TIRADA DE DADOS
            int vDado[3];
            for (int i = 0; i < nDado; i++)
            {
                vDado[i] = rand() % 6 + 1;
            }

            dibujarDados(vDado, nDado);

// variable bandera de penalización para mas de 6 bugs
            bool penalizar5 = false;

//int puntosAntes = puntosRonda;
            analizarJugada(vDado, nDado, pt[turno], bugs[turno], puntosRonda, llegoABugCero[turno], hizo20SinBugs[turno], penalizar5); // Analiza resultado de los dados

// si corresponde, se aplica la penalización de -5 al total
            if (penalizar5)
            {
                puntosTotales[turno] -= 5;
                if (puntosTotales[turno] < 0) puntosTotales[turno] = 0;
            }

            int cantBugs = contarValor(vDado, nDado, 1);//

            if (puntosRonda == 0 && cantBugs > 0)
            {
                cout << "Puntos totales: " << puntosTotales[turno] << endl;
                cout << "PT: " << pt[turno] << " - BUGS: " << bugs[turno] << endl;
                pausarPantalla();
                break;
            }
            else
            {
                cout << "Sumaste " << puntosRonda << " puntos!" << endl;
                cout << "PT: " << pt[turno] << " - BUGS: " << bugs[turno] << endl;

                char decision;
                do
                {
                    cout << "¿Desea continuar lanzando? (S/N): ";
                    cin >> decision;
                    decision = toupper(decision);
                }
                while (decision != 'S' && decision != 'N');

                if (decision == 'N')
                {
                    puntosTotales[turno] += puntosRonda;
                    seguirJugando = false;
                }
            }

            // VERIFICA SI ALCANZARON EL OBJETIVO
            if (puntosTotales[turno] >= objetivo[turno])
            {
                cout << nombreJug[turno] << " ¡Ganaste! Fin del juego para este jugador." << endl;
                finalizado[turno] = true;
                seguirJugando = false;
            }

            pausarPantalla();
        }


        // SI AMBOS TERMINARON, FIN DEL JUEGO
        if (finalizado[0] && finalizado[1])
        {
            juegoTerminado = true;
        }
        else if (rondaActual>=10&&!(finalizado[0]||finalizado [1]))
        {
            cout<< "Se alcanzo la ronda 10 sin ganadores. FIn del juego por limite de rondas."<<endl;
            finalizado[0]=finalizado [1]=true;
            juegoTerminado=true;
            mostrarResultadoFinales(nombreJug, puntosTotales, pt, bugs, llegoABugCero, hizo20SinBugs);


        }
        turno = (turno + 1) % 2;
        if(turno ==0)
            rondaActual++;

    }
mostrarResultadoFinales(nombreJug,puntosTotales,pt,bugs,llegoABugCero,hizo20SinBugs);
for (int i=0; i<2;i++)
{
   rankingNombres[i] =nombreJug[i];
   rankingPuntos[i]=puntosTotales[i];
   totalJugadores++;
}

    cout << "Fin del juego. ¡Gracias por jugar TREY!" << endl;
    pausarPantalla();
}


// ROBA CARTA Y DEFINE PUNTOS DE TIEMPO INICIALES
int robarCarta(int &pt)
{
    int carta = rand() % (65 - 50 + 1) + 50;
    cout << "                                             Tu carta robada es: " << carta << endl;
    if (carta <= 55)
    {
        pt = 7;
    }
    else if (carta <= 60)
    {
        pt = 8;
    }
    else pt = 9;

    return carta;
}

// CUENTA CUANTAS VECES APARECE CIERTO NUMERO EN LOS DADOS
int contarValor(int vDado[], int tam, int valor)
{
    int contador = 0;
    for (int i = 0; i < tam; i++)
    {
        if (vDado[i] == valor)
        {
            contador++;
        }
    }
    return contador;
}

// ANALIZA LA JUGADA Y ACTUALIZA BUGS, PT Y PUNTOS DE RONDA
// [NUEVO] Agregado parámetro penalizar5 para restar 5 puntos si tiene 6+ BUGS y aparece un nuevo 1
// ANALIZA LA JUGADA Y ACTUALIZA BUGS, PT Y PUNTOS DE RONDA
// [NUEVO] Agregado parámetro penalizar5 para restar 5 puntos si tiene 6+ BUGS y aparece un nuevo 1
void analizarJugada(int vDado[], int tam, int &pt, int &bugs, int &puntosRonda, bool &llegoCero, bool &hizo20, bool &penalizar5)
{
    int cantBugs = contarValor(vDado, tam, 1);
    int cantFixes = contarValor(vDado, tam, 3);

    if (cantBugs > 0)
    {
        puntosRonda = 0;

        // [NUEVO] AUMENTAMOS BUGS según cantidad antes de evaluar penalización
        if (cantBugs == 1) bugs += 1;
        else if (cantBugs == 2)
        {
            bugs += 2;
            pt -= 1;
        }
        else if (cantBugs == 3)
        {
            bugs += 3;
            pt -= 2;
        }

        // [NUEVO] Aplicar penalización si ya tiene 6 o más BUGS
        if (bugs >= 5)
        {
            cout << "[PENALIZACIÓN] Tenías 6 o más BUGS y apareció otro: -5 puntos del total." << endl;
            penalizar5 = true;
        }
        else
        {
            penalizar5 = false;
        }

        cout << "Apareció al menos un BUG! Fin de la ronda." << endl;
    }
    else
    {
        penalizar5 = false; // [NUEVO] No se penaliza si no hubo BUGS

        // Si no hubo bugs, se suman los puntos
        for (int i = 0; i < tam; i++)
        {
            puntosRonda += vDado[i];
        }

        // HITO: Acumular 20 puntos en una ronda sin BUGS
        if (puntosRonda >= 20)
        {
            hizo20 = true;
        }
    }

    // FIXES: se eliminan bugs y se otorgan PT si corresponde
    if (cantFixes > 0)
    {
        int eliminados = cantFixes;
        if (eliminados > bugs) eliminados = bugs;
        bugs -= eliminados;

        if (cantFixes == 2) pt += 1; // chequeado
        else if (cantFixes == 3) pt += 2;

        cout << "FIXES: -" << eliminados << " BUGS";
        if (cantFixes == 2) cout << " +1 PT";
        if (cantFixes == 3) cout << " +2 PT";
        cout << endl;

        // HITO: Llegar a 0 BUGS al menos una vez
        if (bugs == 0)
        {
            llegoCero = true;
        }
    }
}

//MUESTRA LA PANTALLA DE JUEGO ACTUAL
void mostrarPanelRonda(string nombreJug[2], int puntosTotales[2], int objetivo[2], int pt[2], int bugs[2], int turno, int ronda, int puntosRonda, int lanzamientos)
{
    cout << "                         TREY" << endl;
    cout << "--------------------------------------------------------" << endl;
    cout << nombreJug[0] << ":" << puntosTotales[0] << " de " << objetivo[0] << " puntos   ";
    cout << "                "<<nombreJug[1] << ":" << puntosTotales[1] << " de " << objetivo[1] << " puntos" << endl;
    cout << "PT: " << pt[0] << " / BUGS: " << bugs[0] << "   ";
    cout << "                    "      "    PT: " << pt[1] << " / BUGS: " << bugs[1] << endl<<endl<<endl;
    cout << "TURNO DE " << nombreJug[turno] << endl;
    cout << "+---------------------------------+" << endl;
    cout << "| RONDA #" <<ronda<<"                        |" << endl;
    cout << "| PUNTOS DE LA RONDA: " <<   puntosRonda << "           |" << endl;
    cout << "| LANZAMIENTOS: " << lanzamientos << "                 |" << endl;
    cout << "+---------------------------------+" << endl;
    cout <<endl;
}

void mostrarEstadisticas(string nombreJug [], int puntosTotales [], int cantidad)
{
    if (cantidad < 1)
    {
        cout << "No hay datos suficientes para mostrar estadísticas." << endl;
        return;
    }

    cout << endl;
    cout << "===============================" << endl;
    cout << "      ESTADISTICAS FINALES     " << endl;
    cout << "===============================" << endl;

    for (int i = cantidad - 2; i < cantidad; i++) // Muestra solo los 2 últimos jugadores
    {
        cout << "Jugador: " << nombreJug[i] << endl;
        cout << "Puntaje total: " << puntosTotales[i] << " PTS" << endl;
        cout << "-------------------------------" << endl;
    }

    string mejorJugador;
    int puntaje1 = puntosTotales[cantidad - 2];
    int puntaje2 = puntosTotales[cantidad - 1];

    if (puntaje1 > puntaje2)
        mejorJugador = nombreJug[cantidad - 2];
    else if (puntaje2 > puntaje1)
        mejorJugador = nombreJug[cantidad - 1];
    else
    {
        cout << "Empate entre ambos jugadores con " << puntaje1 << " puntos." << endl;
        return;
    }

    cout << "El jugador con mayor puntaje fue: " << mejorJugador << endl;
}


// MUESTRA LOS CREDITOS DE LOS INTEGRANTES
void mostrarCreditos()
{
    cout << "                                       ------------INTEGRANTES-------------" << endl;
    cout << "                                       Ponce Alejandro - Legajo nro: 32583" << endl;
    cout << "                                       Troncoso Gabriela - Legajo nro: 32662" << endl;
    cout << "                                       Robledo Pablo - Legajo nro: 27909" << endl;
    cout <<endl;
    pausarPantalla();
}

// CONFIRMA SI EL JUGADOR REALMENTE QUIERE SALIR
bool confirmarSalida()
{
    char respuesta;
    do
    {
        cout << "Seguro que desea salir? (S/N): ";
        cin >> respuesta;
        respuesta = toupper(respuesta);
    }
    while (respuesta != 'S' && respuesta != 'N');


    return (respuesta == 'S');
}

// LIMPIA LA PANTALLA SEGUN EL SISTEMA OPERATIVO
void limpiarPantalla()
{
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

// PAUSA HASTA QUE SE PRESIONE ENTER
void pausarPantalla()
{
    cout << "                                       Presione ENTER para continuar...";
    cin.ignore();
    cin.get();
}

//MUESTRA LOS DADOS DIBUJADOS
void dibujarDados(int vDado[], int cantidad)
{


    for (int i = 0; i < cantidad; i++)
    {

        cout << "+-------+" << endl;
        switch (vDado[i])
        {
        case 1:
            cout << "|       |" << endl;
            cout << "|   *   |" << endl;
            cout << "|       |" << endl;
            break;
        case 2:
            cout << "| *     |" << endl;
            cout << "|       |" << endl;
            cout << "|     * |" << endl;
            break;
        case 3:
            cout << "| *     |" << endl;
            cout << "|   *   |" << endl;
            cout << "|     * |" << endl;
            break;
        case 4:
            cout << "| *   * |" << endl;
            cout << "|       |" << endl;
            cout << "| *   * |" << endl;
            break;
        case 5:
            cout << "| *   * |" << endl;
            cout << "|   *   |" << endl;
            cout << "| *   * |" << endl;
            break;
        case 6:
            cout << "| *   * |" << endl;
            cout << "| *   * |" << endl;
            cout << "| *   * |" << endl;
            break;
        }
        cout << "+-------+" << endl;
    }

}

//MOSTRAR RESULTADOS FINALES

void mostrarResultadoFinales(string nombreJug[], int puntosTotales[], int pt[], int bugs[], bool llegoCero[], bool hizo20[])
{
    int puntajeFinal[2];
    int hitos[2] = {0, 0};

    // Cálculo base
    for (int i = 0; i < 2; i++)
    {
        puntajeFinal[i] = puntosTotales[i] + (pt[i] * 7);

    }

    // Hito: menor cantidad de bugs
    if (bugs[0] < bugs[1])
        hitos[0] += 7;
    else if (bugs[1] < bugs[0])
        hitos[1] += 7;
    else
    {
        hitos[0] += 7;
        hitos[1] += 7;
    }

    // Hito: llegar a 0 BUGS
    if (llegoCero[0]) hitos[0] += 15;
    if (llegoCero[1]) hitos[1] += 15;

    // Hito: hacer 20 puntos sin bugs
    if (hizo20[0]) hitos[0] += 10;
    if (hizo20[1]) hitos[1] += 10;

    cout << endl;
    cout << "TREY" << endl;
    cout << "--------------------------------------------------------" << endl;
    cout << "HITO                     " << "          " << nombreJug[0] << "               " << nombreJug[1] << endl;
    cout << "--------------------------------------------------------" << endl;

    // Puntos base
    cout << "Puntos                  " << "     " << puntosTotales[0] << " PTS"
         << "          " << puntosTotales[1] << " PTS" << endl;

    // BUGS
    cout << "BUGS                   " << "       " << "0 PTS"
         << " (" << bugs[0] << ")" << "       "
         << "0 PTS (" << bugs[1] << ")" << endl;

    // Tiempo
    cout << "Tiempo                 " << "       " << pt[0]*7 << " PTS"
         << " (" << pt[0] << ")" << "       "
         << pt[1]*7 << " PTS (" << pt[1] << ")" << endl;

    // Menor bugs
    cout << "Menor BUGS             " << "      "
         << (bugs[0] < bugs[1] ? 7 : (bugs[0] > bugs[1] ? 0 : 7)) << " PTS"
         << "            "
         << (bugs[1] < bugs[0] ? 7 : (bugs[1] > bugs[0] ? 0 : 7)) << " PTS" << endl;

    // Llegar a 0 bugs
    cout << "Llegar a 0 BUGS        " << "      "
         << (llegoCero[0] ? "15 PTS" : "0 PTS") << "           "
         << (llegoCero[1] ? "15 PTS" : "0 PTS") << endl;

    // Acumular 20 puntos
    cout << "Acumular 20 puntos     " << "       "
         << (hizo20[0] ? "10 PTS" : "0 PTS") << "           "
         << (hizo20[1] ? "10 PTS" : "0 PTS") << endl;

    cout << "--------------------------------------------------------" << endl;

    int total0 = puntajeFinal[0] + hitos[0];
    int total1 = puntajeFinal[1] + hitos[1];

    cout << "TOTAL                  " << "      " << total0 << " PTS" << "          "<< total1 << " PTS" << endl;
    cout << endl;

    if (total0 > total1)
        cout << "GANADOR: " << nombreJug[0] << " con " << total0 << " puntos." << endl;
    else if (total1 > total0)
        cout << "GANADOR: " << nombreJug[1] << " con " << total1 << " puntos." << endl;
    else
        cout << "EMPATE. Ambos jugadores tienen " << total0 << " puntos." << endl;

    cout << endl << "Presione una tecla para continuar..." << endl;
    cin.ignore();
    cin.get();
}


