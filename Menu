#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

// Prototipos de funciones
void jugar();
void mostrarEstadisticas();
void mostrarCreditos();
bool confirmarSalida();

int main()
{
    int opcion;
    bool salir = false;

    system("cls");
    while (!salir)
    {
        // Mostrar menu
        cout << "=======================" << endl;
        cout << "        TREY           " << endl;
        cout << "=======================" << endl;
        cout << "1 - JUGAR" << endl;
        cout << "2 - ESTADISTICAS" << endl;
        cout << "3 - CREDITOS" << endl;
        cout << "0 - SALIR" << endl;
        cout << "Seleccione una opcion: ";
        cin >> opcion;

        switch (opcion)
        {
        case 1:
            jugar();
            break;
        case 2:
            mostrarEstadisticas();
            break;
        case 3:
            mostrarCreditos();
            break;
        case 0:
            salir = confirmarSalida();
            break;
        default:
            cout << "Opcion invalida. Intente nuevamente.\n"<<endl;
        }
    }

    return 0;
}


// Implementaciones b├ísicas para mostrar estructura

void mostrarPantallaRegistro()
    {
    limpiarPantalla();
    cout << "TREY" << endl;
    cout << "--------------------------------------------------------" << endl;
    cout << "Antes de comenzar deben registrar sus nombres:" << endl;
    }

    void registrarJugadores(string nombres[]) {
    mostrarPantallaRegistro();
    // Solicitar nombres de los jugadores
        for(int i = 0; i < MAX_JUGADORES; i++) {
        cout << "¿Nombre? ";
        getline(cin, nombres[i]);

        // Validar que el nombre no esté vacío
        while(nombres[i].empty()) {
            cout << "El nombre no puede estar vacio. Ingrese nuevamente: ";
            getline(cin, nombres[i]);
        }
    }
    }
void jugar()
{
    cout << "Antes de comenzar deben registrar sus nombres:" << endl;
    cout << "Jugador 1: ";
    cin << 
    void registrarJugadores(string nombres[]) {
    mostrarPantallaRegistro();
    // Solicitar nombres de los jugadores
        for(int i = 0; i < MAX_JUGADORES; i++) {
        cout << "¿Nombre? ";
        getline(cin, nombres[i]);

        // Validar que el nombre no esté vacío
        while(nombres[i].empty()) {
            cout << "El nombre no puede estar vacio. Ingrese nuevamente: ";
            getline(cin, nombres[i]);
        }
    }
    }


    //Robar carta del 50 al 65
    const int TAM = 16;
    int vNum[TAM];
    int acumuladorJug;

    cout << "Jugador 1 elija una carta para empezar: ";
    system("pause");

    // Inicializar la semilla con el tiempo actual
    srand(static_cast<unsigned int>(time(NULL)));

    // Llenar el vector con números aleatorios del 50 al 65 incluidos
    for (int i = 0; i < TAM; i++)
    {
        vNum[i] = rand() % (65-50 + 1)+50;
    }
    // Mostrar el contenido del vector
    cout << "Tu carta robada es: ";
    for (int i = 0; i < 1; i++)
    {
        cout << vNum[i] << " "<<endl;

        //Vector para puntos
        int vNum[i];
        {
            if (vNum[i]<=55)
            {
                acumuladorJug +=7;
                cout<< 7<<" ptos"<<endl;
            }
            else
            {
                if (vNum[i]<=60)
                {
                    acumuladorJug +=8;
                    cout<< 8<<" ptos"<<endl;
                }
                else
                {
                    if (vNum[i]<=65)
                    {
                        acumuladorJug +=9;
                        cout<<9<<" ptos"<<endl;
                    }
                }
            }
        }
    }
    cout<< "Total de puntos: "<<acumuladorJug<<endl;

}

void mostrarEstadisticas()
{
    cout << "\n--- Estadisticas del juego ---\n";
    // Mostrar info del ├║ltimo juego (se puede agregar vector para ranking)
}

void mostrarCreditos()
{
    cout << "\n--- Cr├⌐ditos ---\n";
    cout << "Integrantes del equipo:\n";
    cout << "- Apellido, Nombre - Legajo\n";
    cout << "- Nombre del equipo\n";
}






bool confirmarSalida()
{
    char respuesta;
    do
    {
        cout << "┬┐Seguro que desea salir? (S/N): ";
        cin >> respuesta;
        respuesta = toupper(respuesta);
    }
    while (respuesta != 'S' && respuesta != 'N');

    return (respuesta == 'S');
}

